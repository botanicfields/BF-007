// Copyright 2019 BotanicFields, Inc.
// BF-007
// M5Stack/ESP32 + HT16K33 + LED Matrix 16 x 64 (8 x 8 x 16)
//
#pragma once
#include <Arduino.h>

//..:....1....:....2....:....3....:....4....:....5....:....6....:....7..
// configuration of LED Matrix display and HT16K33
// image of LED matrix 
//      x-axis:  0  1  2  3  4  5  6  7   8  9 10 11 12 13 14 15  16 17 18 19 20 21 22 23 
// HT16K33_qty:  0  0  0  0  0  0  0  0   1  1  1  1  1  1  1  1   2  2  2  2  2  2  2  2 
// HT16K33 ram: 01 23 45 67 89 ab cd ef  01 23 45 67 89 ab cd ef  01 23 45 67 89 ab cd ef
//
//      y-axis:  0  1  2  3  4  5  6  7   8  9 10 11 12 13 14 15
// HT16K33 ram:  0  0  0  0  0  0  0  0   1  1  1  1  1  1  1  1
// HT16K33 bit:  0  1  2  3  4  5  6  7   0  1  2  3  4  5  6  7
//
const int HT16K33_com =    8;  // x-axis an HT16K33 (dots)
const int HT16K33_row =   16;  // y-axis an HT16K33 (dots)
const int HT16K33_ram =   16;  // RAM    an HT16K33 (bytes)
const int HT16K33_qty =    8;  // quantity of HT16K33 (max 8)
const int HT16K33_i2c = 0x70;  // I2C address = 0x70..0x77
const uint8_t  wire1_sda = 26;      // GPIO26
const uint8_t  wire1_scl = 13;      // GPIO13
const uint32_t wire1_frq = 400000;  // 400kHz

//..:....1....:....2....:....3....:....4....:....5....:....6....:....7..
// image buffer
const int HT16K33_x = HT16K33_com * HT16K33_qty;  // x-size (dots)
const int HT16K33_y = HT16K33_row;                // y-size (dots)
union HT16K33_t {
  uint16_t img[HT16K33_x];                        // virtual image
  uint8_t  ram[HT16K33_qty][HT16K33_ram];         // RAM image of HT16K33
};

//..:....1....:....2....:....3....:....4....:....5....:....6....:....7..
// queue entry for flow functions 
struct HT16K33_flow_t {
  const char* s;
  uint8_t c;
  uint16_t delay_ms;
};

//..:....1....:....2....:....3....:....4....:....5....:....6....:....7..
// functions
void HT16K33_init();
void HT16K33_read(uint8_t address, uint8_t command, uint8_t rd_size = 0, uint8_t* rd_data = NULL);
void HT16K33_write(uint8_t address, uint8_t command, uint8_t wt_size = 0, uint8_t* wt_data = NULL);
void HT16K33_update();
void HT16K33_dimmer(uint8_t address, uint8_t dimmer);
void HT16K33_blink(uint8_t address, uint8_t blink);

void HT16K33_clear(uint16_t c = 0);
void HT16K33_plot(int x, int y, int c);
void HT16K33_char(int x, int y, int c, char ch);

void HT16K33_line(int x1, int y1, int x2, int y2, int c);
void HT16K33_circle(int x0, int y0, int r, int c);
void HT16K33_string(int x, int y, int c, const char* s);
void HT16K33_flow2(int c1, int c2, int d1, int d2, const char* s1, const char* s2);

void swapInt(int &x, int &y);
void int2decStr(unsigned long n, int pos, int len, char* s);
void int2hexStr(unsigned long n, int pos, int len, char* s);

const int HT16K33_font_x = 6;  // x-size of HT16K33_font
const int HT16K33_font_y = 7;  // y-size of HT16K33_font
const uint8_t HT16K33_font[][HT16K33_font_x] = {
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },  // 0x20 space
  { 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, },  // 0x21 !
  { 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, },  // 0x22 "
  { 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00, },  // 0x23 #
  { 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00, },  // 0x24 $
  { 0x23, 0x13, 0x08, 0x64, 0x62, 0x00, },  // 0x25 %
  { 0x36, 0x49, 0x56, 0x20, 0x50, 0x00, },  // 0x26 &
  { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00, },  // 0x27 '
  { 0x00, 0x1C, 0x22, 0x41, 0x00, 0x00, },  // 0x28 (
  { 0x00, 0x41, 0x22, 0x1C, 0x00, 0x00, },  // 0x29 )
  { 0x14, 0x08, 0x3E, 0x08, 0x14, 0x00, },  // 0x2a *
  { 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, },  // 0x2b +
  { 0x00, 0xA0, 0x60, 0x00, 0x00, 0x00, },  // 0x2c ,
  { 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, },  // 0x2d -
  { 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, },  // 0x2e .
  { 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, },  // 0x2f /
  { 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00, },  // 0x30 0
  { 0x00, 0x02, 0x7F, 0x00, 0x00, 0x00, },  // 0x31 1
  { 0x62, 0x51, 0x49, 0x49, 0x46, 0x00, },  // 0x32 2
  { 0x22, 0x41, 0x49, 0x49, 0x36, 0x00, },  // 0x33 3
  { 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00, },  // 0x34 4
  { 0x27, 0x45, 0x45, 0x45, 0x39, 0x00, },  // 0x35 5
  { 0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00, },  // 0x36 6
  { 0x01, 0x61, 0x11, 0x09, 0x07, 0x00, },  // 0x37 7
  { 0x36, 0x49, 0x49, 0x49, 0x36, 0x00, },  // 0x38 8
  { 0x06, 0x49, 0x49, 0x29, 0x1E, 0x00, },  // 0x39 9
  { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00, },  // 0x3a :
  { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00, },  // 0x3b ;
  { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00, },  // 0x3c <
  { 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, },  // 0x3d =
  { 0x41, 0x22, 0x14, 0x08, 0x00, 0x00, },  // 0x3e >
  { 0x02, 0x01, 0x51, 0x09, 0x06, 0x00, },  // 0x3f ?
  { 0x3E, 0x41, 0x5D, 0x55, 0x5E, 0x00, },  // 0x40 @
  { 0x7C, 0x12, 0x11, 0x12, 0x7C, 0x00, },  // 0x41 A
  { 0x41, 0x7F, 0x49, 0x49, 0x36, 0x00, },  // 0x42 B
  { 0x3E, 0x41, 0x41, 0x41, 0x41, 0x00, },  // 0x43 C
  { 0x41, 0x7F, 0x41, 0x41, 0x3E, 0x00, },  // 0x44 D
  { 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00, },  // 0x45 E
  { 0x7F, 0x09, 0x09, 0x09, 0x01, 0x00, },  // 0x46 F
  { 0x3E, 0x41, 0x49, 0x49, 0x79, 0x00, },  // 0x47 G
  { 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00, },  // 0x48 H
  { 0x00, 0x41, 0x7F, 0x41, 0x00, 0x00, },  // 0x49 I
  { 0x40, 0x40, 0x41, 0x3F, 0x01, 0x00, },  // 0x4a J
  { 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00, },  // 0x4b K
  { 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00, },  // 0x4c L
  { 0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00, },  // 0x4d M
  { 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00, },  // 0x4e N
  { 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00, },  // 0x4f O
  { 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00, },  // 0x50 P
  { 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00, },  // 0x51 Q
  { 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00, },  // 0x52 R
  { 0x46, 0x49, 0x49, 0x49, 0x31, 0x00, },  // 0x53 S
  { 0x01, 0x01, 0x7F, 0x01, 0x01, 0x00, },  // 0x54 T
  { 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00, },  // 0x55 U
  { 0x0F, 0x30, 0x40, 0x30, 0x0F, 0x00, },  // 0x56 V
  { 0x3F, 0x40, 0x3C, 0x40, 0x3F, 0x00, },  // 0x57 W
  { 0x63, 0x14, 0x08, 0x14, 0x63, 0x00, },  // 0x58 X
  { 0x03, 0x0C, 0x70, 0x0C, 0x03, 0x00, },  // 0x59 Y
  { 0x61, 0x51, 0x49, 0x45, 0x43, 0x00, },  // 0x5a Z
  { 0x00, 0x7F, 0x41, 0x41, 0x00, 0x00, },  // 0x5b [
  { 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, },  // 0x5c back slash
  { 0x00, 0x41, 0x41, 0x7F, 0x00, 0x00, },  // 0x5d ]
  { 0x04, 0x02, 0x01, 0x02, 0x04, 0x00, },  // 0x5e ^
  { 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, },  // 0x5f _
  { 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, },  // 0x60 `
  { 0x20, 0x54, 0x54, 0x54, 0x78, 0x00, },  // 0x61 a
  { 0x7F, 0x44, 0x44, 0x44, 0x38, 0x00, },  // 0x62 b
  { 0x38, 0x44, 0x44, 0x44, 0x44, 0x00, },  // 0x63 c
  { 0x38, 0x44, 0x44, 0x44, 0x7F, 0x00, },  // 0x64 d
  { 0x38, 0x54, 0x54, 0x54, 0x58, 0x00, },  // 0x65 e
  { 0x08, 0x7E, 0x09, 0x09, 0x09, 0x00, },  // 0x66 f
  { 0x18, 0xA4, 0xA4, 0xA4, 0x7C, 0x00, },  // 0x67 g
  { 0x7F, 0x04, 0x04, 0x04, 0x78, 0x00, },  // 0x68 h
  { 0x00, 0x44, 0x7D, 0x40, 0x00, 0x00, },  // 0x69 i
  { 0x80, 0x80, 0x44, 0x3D, 0x00, 0x00, },  // 0x6a j
  { 0x7F, 0x10, 0x10, 0x28, 0x44, 0x00, },  // 0x6b k
  { 0x00, 0x01, 0x7F, 0x00, 0x00, 0x00, },  // 0x6c l
  { 0x7C, 0x04, 0x78, 0x04, 0x78, 0x00, },  // 0x6d m
  { 0x7C, 0x04, 0x04, 0x04, 0x78, 0x00, },  // 0x6e n
  { 0x38, 0x44, 0x44, 0x44, 0x38, 0x00, },  // 0x6f o
  { 0xFC, 0x44, 0x44, 0x44, 0x38, 0x00, },  // 0x70 p
  { 0x38, 0x44, 0x44, 0x44, 0xFC, 0x00, },  // 0x71 q
  { 0x7C, 0x10, 0x08, 0x04, 0x04, 0x00, },  // 0x72 r
  { 0x48, 0x54, 0x54, 0x54, 0x24, 0x00, },  // 0x73 s
  { 0x04, 0x3F, 0x44, 0x44, 0x44, 0x00, },  // 0x74 t
  { 0x3C, 0x40, 0x40, 0x40, 0x7C, 0x00, },  // 0x75 u
  { 0x0C, 0x30, 0x40, 0x30, 0x0C, 0x00, },  // 0x76 v
  { 0x3C, 0x40, 0x38, 0x40, 0x7C, 0x00, },  // 0x77 w
  { 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, },  // 0x78 x
  { 0x8C, 0xB0, 0x40, 0x30, 0x0C, 0x00, },  // 0x79 y
  { 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00, },  // 0x7a z
  { 0x08, 0x36, 0x41, 0x41, 0x00, 0x00, },  // 0x7b {
  { 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, },  // 0x7c |
  { 0x00, 0x41, 0x41, 0x36, 0x08, 0x00, },  // 0x7d }
  { 0x02, 0x01, 0x02, 0x04, 0x02, 0x00, },  // 0x7e ~
  { 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, },  // 0x7f DEL
};
